!function s(n,o,h){function u(e,t){if(!o[e]){if(!n[e]){var i="function"==typeof require&&require;if(!t&&i)return i(e,!0);if(c)return c(e,!0);var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}var r=o[e]={exports:{}};n[e][0].call(r.exports,function(t){return u(n[e][1][t]||t)},r,r.exports,s,n,o,h)}return o[e].exports}for(var c="function"==typeof require&&require,t=0;t<h.length;t++)u(h[t]);return u}({1:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var r=function(){function a(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(t,e,i){return e&&a(t.prototype,e),i&&a(t,i),t}}();var a=function(){function a(t,e,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),this.gameSize=t,this.speed=e,this.state=this.getEmpty2DArray(this.gameSize.height,this.gameSize.width),this.drawer=i,this.addGalaxy(),this.play=!1,this.toggleCell()}return r(a,[{key:"prepareGame",value:function(){this.drawer.draw(this.state)}},{key:"toggleGame",value:function(){var t=this;this.play=!this.play,this.play?this.timer=setInterval(function(){t.step()},this.speed):clearInterval(this.timer)}},{key:"changeSpeed",value:function(t){var e=this;this.speed=t,clearInterval(this.timer),this.timer=setInterval(function(){e.step()},this.speed)}},{key:"stopGame",value:function(){this.play=!1,clearInterval(this.timer)}},{key:"step",value:function(){for(var t=this.getEmpty2DArray(this.gameSize.height,this.gameSize.width),e=0;e<this.gameSize.height;e++)for(var i=0;i<this.gameSize.width;i++){var a=this.countAliveCells(this.state,e,i);this.state[e][i]?3!==a&&2!==a||(t[e][i]=1):3===a&&(t[e][i]=1)}this.state=t,this.drawer.draw(this.state)}},{key:"countAliveCells",value:function(t,e,i){for(var a=0,r=e-1;r<=e+1;r++)a+=this.getCellState(t,r,i-1),a+=this.getCellState(t,r,i+1);return a+=this.getCellState(t,e-1,i),a+=this.getCellState(t,e+1,i)}},{key:"getCellState",value:function(t,e,i){return(t[e]||[])[i]?1:0}},{key:"getEmpty2DArray",value:function(t,e){return new Array(t).fill(0).map(function(){return new Array(e).fill(0)})}},{key:"toggleCell",value:function(){var u=this;this.drawer.elementForDrawing.addEventListener("click",function(t){if(t.target===u.drawer.board){console.log("pik");var e=u.drawer.board.clientHeight,i=u.drawer.board.clientWidth,a=t.offsetX,r=t.offsetY,s=e/u.gameSize.height,n=i/u.gameSize.width,o=Math.floor(a/n),h=Math.floor(r/s);u.state[h][o]=u.state[h][o]?0:1,u.drawer.draw(u.state)}})}},{key:"addGalaxy",value:function(){this.state[2][2]=1,this.state[3][2]=1,this.state[4][2]=1,this.state[5][2]=1,this.state[6][2]=1,this.state[7][2]=1,this.state[2][3]=1,this.state[3][3]=1,this.state[4][3]=1,this.state[5][3]=1,this.state[6][3]=1,this.state[7][3]=1,this.state[9][2]=1,this.state[9][3]=1,this.state[9][4]=1,this.state[9][5]=1,this.state[9][6]=1,this.state[9][7]=1,this.state[10][2]=1,this.state[10][3]=1,this.state[10][4]=1,this.state[10][5]=1,this.state[10][6]=1,this.state[10][7]=1,this.state[5][9]=1,this.state[6][9]=1,this.state[7][9]=1,this.state[8][9]=1,this.state[9][9]=1,this.state[10][9]=1,this.state[5][10]=1,this.state[6][10]=1,this.state[7][10]=1,this.state[8][10]=1,this.state[9][10]=1,this.state[10][10]=1,this.state[2][5]=1,this.state[2][6]=1,this.state[2][7]=1,this.state[2][8]=1,this.state[2][9]=1,this.state[2][10]=1,this.state[3][5]=1,this.state[3][6]=1,this.state[3][7]=1,this.state[3][8]=1,this.state[3][9]=1,this.state[3][10]=1}},{key:"showControls",value:function(){document.querySelector(".controls").style.display="block"}},{key:"hideControls",value:function(){document.querySelector(".controls").style.display="none"}}]),a}();i.default=a},{}],2:[function(t,e,i){"use strict";var a=s(t("./utils/router")),r=s(t("./routes"));function s(t){return t&&t.__esModule?t:{default:t}}new a.default(r.default)},{"./routes":3,"./utils/router":5}],3:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var a=s(t("./gameOfLife")),r=s(t("./utils/drawer"));function s(t){return t&&t.__esModule?t:{default:t}}var n={width:+document.querySelector(".size-input.x-input").value,height:+document.querySelector(".size-input.y-input").value},o=new r.default(document.querySelector("#content"),n),h=new a.default(n,250,o);h.showControls();var u=document.querySelector(".play-button");u.addEventListener("click",function(){h.toggleGame(),1==h.play?u.innerHTML='<i class="fas fa-pause"></i>':u.innerHTML='<i class="fas fa-play"></i>'}),document.querySelector("input[type=range]").addEventListener("change",function(t){h.changeSpeed(t.target.value)});var c=[{match:"",onEnter:function(){window.location.hash="about"}},{match:"about",onBeforeEnter:function(){h.stopGame(),u.innerHTML='<i class="fas fa-play"></i>',h.hideControls()},onEnter:function(){var t=document.querySelector("#content");l("about"),t.innerHTML='\n            <div class="about">\n                <h1>\n                    <i class="fab fa-buromobelexperte label"></i>\n                    <span>Conway\'s Game of Life</span>\n                </h1>\n                <h2 class="wiki">\n                    <a class="link" href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Wikipedia</a>\n                </h2>\n                <h2><a class="link" href="https://github.com/Citrinin">Author - Kate Kuzkina</a></h2>\n            </div>'},onLeave:function(){h.showControls()}},{match:/game-(.+)/,onEnter:function(t){o.setDrawer(t[0]),l(t[0]),h.prepareGame()},onLeave:function(){}}];function l(t){document.querySelector(".active").className="",document.querySelector('[href*="'+t+'"]').parentElement.className="active"}i.default=c},{"./gameOfLife":1,"./utils/drawer":4}],4:[function(t,e,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var a=function(){function a(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(t,e,i){return e&&a(t.prototype,e),i&&a(t,i),t}}();var r=function(){function i(t,e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),this.elementForDrawing=t,this.gameSize=e,this.textBoard=document.createElement("pre"),this.textBoard.classList.add("text-content"),this.canvasBoard=document.createElement("canvas"),this.svgBoard=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.draw=this.drawText,this.board=this.textBoard,this.pixelSize=15,this.canvasImg=document.querySelector(".paw")}return a(i,[{key:"drawText",value:function(t){var i="";t.forEach(function(t,e){t.forEach(function(t,e){i+=t?"&#9642;":" "}),i+="\n"}),this.board.innerHTML=i}},{key:"drawCanvas",value:function(t){var a=this,r=this.board.getContext("2d"),e=r.createLinearGradient(0,0,this.gameSize.width*this.pixelSize,this.gameSize.height*this.pixelSize);e.addColorStop(0,"#cc80ff"),e.addColorStop(1,"#ffb366"),r.clearRect(0,0,this.gameSize.width*this.pixelSize,this.gameSize.height*this.pixelSize),r.fillStyle=e,t.forEach(function(t,i){t.forEach(function(t,e){t&&r.fillRect(e*a.pixelSize,i*a.pixelSize,a.pixelSize-2,a.pixelSize-2)})})}},{key:"drawSVG",value:function(t){var a=this,r='    <defs>\n        <linearGradient id="MyGradient" x1="0" x2="1" y1="0" y2="1">\n            <stop offset="0%"  stop-color="#66e0ff"/>\n            <stop offset="100%" stop-color="#b366ff"/>\n        </linearGradient>\n    </defs>';t.forEach(function(t,i){t.forEach(function(t,e){r+=t?'<rect \n                    x="'+e*a.pixelSize+'"\n                    y="'+i*a.pixelSize+'" \n                    width="'+(a.pixelSize-2)+'" \n                    height="'+(a.pixelSize-2)+'"\n                    fill="url(#MyGradient)"></rect>':""})}),this.svgBoard.innerHTML=r}},{key:"setDrawer",value:function(t){switch(this.elementForDrawing.innerHTML="",t){case"text":this.draw=this.drawText,this.board=this.textBoard;break;case"canvas":this.draw=this.drawCanvas,this.canvasBoard.height=this.gameSize.height*this.pixelSize,this.canvasBoard.width=this.gameSize.width*this.pixelSize,this.board=this.canvasBoard;break;case"svg":this.draw=this.drawSVG,this.svgBoard.setAttribute("height",this.gameSize.height*this.pixelSize),this.svgBoard.setAttribute("width",this.gameSize.width*this.pixelSize),this.board=this.svgBoard;break;default:this.draw=this.drawText,this.board=this.textBoard}this.elementForDrawing.appendChild(this.board)}}]),i}();i.default=r},{}],5:[function(t,e,i){"use strict";function a(t){var e=this;this.routes=t||[],this.currentRoute,this.previousRoute,this.currentParams,this.previousParams,window.addEventListener("hashchange",function(t){e.handler(window.location.hash)}),this.handler(window.location.hash)}Object.defineProperty(i,"__esModule",{value:!0}),a.prototype={handler:function(t){this.previousRoute=this.currentRoute,this.previousParams=this.currentParams,this.currentRoute=this.findNewRoute(t),this.launchHandlers()},findNewRoute:function(t){t=t.slice(1);for(var e=0;e<this.routes.length;e++){var i=this.routes[e];if("string"==typeof i.match&&i.match===t)return this.currentParams="",i;if("function"==typeof i.match&&i.match(t))return this.currentParams="",i;if(i.match instanceof RegExp&&i.match.test(t))return this.currentParams=t.match(i.match)||[],this.currentParams.splice(0,1),i}},launchHandlers:function(){var t=this;Promise.resolve().then(function(){t.previousRoute&&t.previousRoute.onLeave&&t.previousRoute.onLeave(t.previousParams)}).then(function(){t.currentRoute&&t.currentRoute.onBeforeEnter&&t.currentRoute.onBeforeEnter(t.currentParams)}).then(function(){t.currentRoute&&t.currentRoute.onEnter&&t.currentRoute.onEnter(t.currentParams)})}},i.default=a},{}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
